C51 COMPILER V9.01   PID                                                                   07/03/2018 19:55:35 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE PID
OBJECT MODULE PLACED IN pid.obj
COMPILER INVOKED BY: D:\keilC51\C51\BIN\C51.EXE USERS\pid.c BROWSE DEBUG OBJECTEXTEND PRINT(.\pid.lst) OBJECT(pid.obj)

line level    source

   1          
   2          //=============
   3          //PID.C
   4          //=============
   5          
   6          #include "main.h"
   7          
   8          
   9          #define set_distance 20.00  //设定距离
  10          #define allow_error 2.0 //死区，允许误差带,0.5太小，系统不稳定，一直在调节，2就太大，
  11          
  12          extern float real_distance ;      //实际距离，本体在主函数
  13          extern PID_value  xdata  ASR;     
  14          
  15          
  16          /* ********************************************************
  17          ** 作者 ：Andrew
  18          ** 日期 ：2018.3.8    
  19          ** 说明 ：
  20                  1、进行PID运算，被PID_out函数调用
  21                  2、使用了条件编译进行功能切换，节省计算时间
  22                     在校正PID参数的时候，将宏定义 PID_DEBUG 设为1；
  23                     校正完毕后，置0，直接把计算结果赋值给a
  24                  3、形式和标准PID公式有所差别，但是实质都是一样的，减少了计算量                            
  25          ******************************************************** */
  26          void PID_operation(PID_value *p)
  27          {
  28   1              
  29   1              //使用条件编译进行功能切换
  30   1              #if (PID_DEBUG)
  31   1                      
  32   1              float a0,a1,a2;
  33   1              
  34   1              //计算中间变量a0,a1,a2;
  35   1              a0 = p->KP + p->KI*p->T + p->KD/p->T ;
  36   1              a1 = p->KP + 2*p->KD/p->T ;
  37   1              a2 = p->KD/p->T ;
  38   1              //计算输出
  39   1              p->output = p->output_1 + a0*p->error - a1*p->error_1 + a2*p->error_2 ;
  40   1              
  41   1              #else
                      //非调试状态下，直接给a赋值计算输出，减小计算量,因为一旦三个系数确定，T已知，即可自己计算出对应的a
                      p->output = p->output_1 + p->a0*p->error - p->a1*p->error_1 + p->a2*p->error_2 ;
                      
                      #endif
  46   1              
  47   1              //输出限幅
  48   1              p->output = constrain_float(p->output,p->out_min,p->out_max);
  49   1              
  50   1              //为下次计算迭代
  51   1              //这里顺序千万不要搞错，不然输出占空比是错误的。
  52   1              p->output_1 = p->output;
  53   1              p->error_2 = p->error_1;
  54   1              p->error_1 = p->error;
  55   1              
C51 COMPILER V9.01   PID                                                                   07/03/2018 19:55:35 PAGE 2   

  56   1      }
  57          
  58          /* ********************************************************
  59          ** 作者 ：Andrew
  60          ** 日期 ：2018.3.8    
  61          ** 说明 ：
  62                  1、PID输出函数，被主函数调用
  63                  2、首先根据设定与实际的距离差，判断需要前进还是后退
  64                  3、在误差为      allow_error 之内，停车，防止小车一直在抖，毕竟超声波有误差。                        
  65          ******************************************************** */
  66          void PID_out(float *real_distance)
  67          {
  68   1              float xdata duty;                                       //接收PID运算结果的缓冲
  69   1              
  70   1              ASR.ref = set_distance;                         //距离给定
  71   1              ASR.fdb = *real_distance;                       //获取实际距离反馈，实际距离一直在不断刷新
  72   1              
  73   1              ASR.error = ASR.ref - ASR.fdb;          //偏差
  74   1              
  75   1              PID_operation(&ASR);                            //进行PID运算
  76   1              
  77   1              duty = ASR.output;
  78   1              
  79   1              if(ASR.error > allow_error)                     //偏差为正，设定值大于实际值，后退
  80   1              {
  81   2                      left_go_back;
  82   2                      right_go_back;
  83   2                      Left_Forward_Duty = (int)Low_Speed + (int)duty;         //带符号数和无符号数运算会转换为无符号数
  84   2                      Right_Forward_Duty = Left_Forward_Duty;                         //速度一样
  85   2              }
  86   1              
  87   1              else if((-ASR.error) > allow_error)                                             //偏差为负，设定值小于实际值，前进
  88   1              {
  89   2                      left_go_ahead;
  90   2                      right_go_ahead;
  91   2                      Left_Forward_Duty = (int)Low_Speed + (int)duty;
  92   2                      Right_Forward_Duty = Left_Forward_Duty ;                        //速度一样
  93   2              }
  94   1              
  95   1              else                    //在误差范围内，停车
  96   1                      car_stop();
  97   1                      
  98   1      }
  99          
 100          
 101          //浮点数限幅,constrain ->约束，限制
 102          //如果输入不是数字，则返回极端值的平均值
 103          //isnan函数检测输入是否是数字，is not a number
 104          float constrain_float(float amt, float low, float high) 
 105          {
 106   1              return ((amt)<(low)?(low):((amt)>(high)?(high):(amt)));
 107   1              
 108   1      }
 109          
 110          /*
 111          //16位整型数限幅
 112          int constrain_int16(int amt, int low, int high)
 113          {
 114                  return ((amt)<(low)?(low):((amt)>(high)?(high):(amt)));
 115          }
 116          */
 117          
C51 COMPILER V9.01   PID                                                                   07/03/2018 19:55:35 PAGE 3   

 118          //========================
 119          //END OF FILE
 120          //========================


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    741    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
